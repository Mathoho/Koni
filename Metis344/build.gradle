/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */
 //from Vert
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.api.tasks.testing.logging.TestLogEvent.*
import org.gradle.api.tasks.*

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    //from Vert
    id 'com.github.johnrengelman.shadow' version "7.1.2"
}

//From Vert
group = "com.example"
version = "1.0.0-SNAPSHOT"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    //temporal dependency
    maven {
            url "https://jdbc.postgresql.org/maven2"
        }
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
}

// application {
//     // Define the main class for the application.
//     //mainClass = 'VertNTemp.App'
//     //mainClassName = VertNTemp.launcherClassName
//     //mainClassName = MainVerticle
// }
// def vertxVersion = "4.4.6"
// def junitJupiterVersion = "5.9.1"

// def mainVerticleName = "com.example.starter.MainVerticle"
// def launcherClassName = "io.vertx.core.Launcher"

// def watchForChange = "src/**/*"
// def doOnChange = "${project.projectDir}/gradlew classes"
ext{
    vertxVersion = '4.4.6'
    junitJupiterVersion = '5.9.1'
    mainVerticleName = 'com.example.starter.MainVerticle'
    launcherClassName = 'io.vertx.core.Launcher'
    watchForChange = 'src/**/*'
    doOnChange = "${project.projectDir}/gradlew classes"
}


dependencies {
    implementation platform("io.vertx:vertx-stack-depchain:$vertxVersion")
    implementation "io.vertx:vertx-core"
    testImplementation "io.vertx:vertx-junit5"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"
    implementation "io.vertx:vertx-web:4.4.6"

    implementation "io.vertx:vertx-web:4.4.6"
    implementation "io.vertx:vertx-web-client:4.4.6"

    //temporal dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    implementation 'org.postgresql:postgresql:42.3.1'

    implementation 'org.postgresql:postgresql:42.6.0'
    implementation group: 'io.temporal', name: 'temporal-sdk', version: '1.18.2'
    implementation group: 'org.slf4j',  name: 'slf4j-nop', version: '2.0.6'
    
    testImplementation group: 'io.temporal', name: 'temporal-testing', version: '1.18.2'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.1.1'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

tasks.withType(ShadowJar) {
    archiveClassifier.set("fat")
    manifest {
        attributes(["Main-Verticle": mainVerticleName])
    }
    mergeServiceFiles()
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging.events = ["PASSED", "SKIPPED", "FAILED"]
}

tasks.withType(JavaExec) {
    args = ["run", mainVerticleName, "--redeploy=" + watchForChange, "--launcher-class=" + launcherClassName, "--on-redeploy=" + doOnChange]
}
//TODO still need to decide which one will be my main class 
//TOD but i am preety sure it is going to be the launch one since it is my server
//TODO but i can have multiple clasees look belon
/** */
// task api(type: JavaExec) {
//     mainClass = 'api'
//     classpath = sourceSets.main.runtimeClasspath
// }
application {
  mainClass.set(launcherClassName)
}

// task startWorker(type: JavaExec) {
//     mainClass = 'StartWorker'
//     classpath = sourceSets.main.runtimeClasspath
// }

// task startWorker(type: JavaExec) {
//     mainClass = 'StartWorker'
//     classpath = sourceSets.main.runtimeClasspath
// }
